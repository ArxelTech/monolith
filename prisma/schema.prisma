// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String?
  fullName      String
  username      String?
  avatar        String?
  emailVerified Boolean  @default(false)
  verified      Boolean  @default(false)
  facebookId    String?
  googleId      String?
  interests     String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  isBusiness    Boolean  @default(false)
  service       String[] @default([])

  // relationship
  events         Event[]
  Comment        Comment[]
  Picture        Picture[]
  TicketPurchase TicketPurchase[]
}

model Service {
  id      String @id @default(cuid())
  service String
}

model Interest {
  id       String @id @default(cuid())
  interest String
}

model Event {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String
  bannerImage String?
  pictures    String[] @default([])
  videoUrl    String?
  state       String
  lga         String
  address     String
  time        DateTime
  date        DateTime
  isPrivate   Boolean   @default(false)
  hasTickets  Boolean   @default(false)
  isDraft     Boolean   @default(true)
  eventType   String
  isLiveEvent Boolean   @default(false)
  people      String[]  @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  // relationships
  user           User?            @relation(fields: [userId], references: [id])
  tickets        Ticket[]
  Comment        Comment[]
  Picture        Picture[]
  TicketPurchase TicketPurchase[]
}

model Ticket {
  id          String   @id @default(cuid())
  eventId     String
  ticketName  String
  price       Float
  description String
  isFree      Boolean
  isUnlimited Boolean
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // events
  event          Event            @relation(fields: [eventId], references: [id])
  TicketPurchase TicketPurchase[]
}

model TicketPurchase {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  ticketId  String
  quantity  Int
  transactionId Int? @db.Integer
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // relationships
  user   User   @relation(fields: [userId], references: [id])
  event  Event  @relation(fields: [eventId], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id])
}

model Comment {
  id          String   @id @default(cuid())
  eventId     String
  userId      String
  comment     String
  isOwner     Boolean
  isAnonymous Boolean
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // events
  event Event @relation(fields: [eventId], references: [id])
  userr User  @relation(fields: [userId], references: [id])
}

model Picture {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  isFree    String
  price     Float    @default(0)
  approved  Boolean
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // relationship
  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}

enum OTPENUM {
  AUTH
  RESETPASSWORD
  PAYMENT
}

model OTP {
  id        String   @id @default(cuid())
  userId    String
  isForUser Boolean
  code      Int
  isExpired Boolean  @default(false)
  type      OTPENUM
  createdAt DateTime @default(now())
  updatadAt DateTime @default(now()) @updatedAt
}
